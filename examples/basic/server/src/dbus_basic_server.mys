# This file was genrated by dbus.py.

from dbus.server import Object
from dbus.types import Type

@trait
class BasicDemoInterface:

    def random(self) -> i32:
        pass

    def hello(self, name: string) -> string:
        pass

    def echo(self, input: Type) -> Type:
        pass

    def cat(self, file: string) -> bytes:
        pass

    def sum(self, ints: [i32]) -> i32:
        pass

    def info(self) -> {string: string}:
        pass

    def exit(self) -> string:
        pass

class BasicDemo:

    def signal_count(self, value: i64):
        raise NotImplementedError()

class BasicObject(Object):
    basic_demo: BasicDemo

    def __init__(self,
                 bus_name: string,
                 path: string,
                 basic_demo: BasicDemoInterface):
        self.basic_demo = BasicDemo()

#     def on_method_call(self, data: Reader):
#         match name:
#             case "Random":
#                 self.basic_demo.random()
#             case "Echo":
#                 output = self.basic_demo.basic(data.read_variant())
#             case "Cat":
#                 output = self.basic_demo.cat(data.read_string())
#             case "Sum":
#                 output = self.basic_demo.sum(data.read_array_i32())

    def signal_count(self, value: i64):
        raise NotImplementedError()
