from dbus import SessionBus
from dbus.types import Double
from dbus.types import String
from dbus.types import Type
from fiber import Fiber
from fiber import sleep
from os import BinaryFile
from random.pseudo import randint
from .dbus_basic_server import BasicDemoInterface
from .dbus_basic_server import BasicObject

class BasicDemo(BasicDemoInterface):
    bus: SessionBus

    def random(self) -> i32:
        return i32(randint(0, 100))

    def hello(self, name: string) -> string:
        print(name)

        return "Hi!"

    def echo(self, input: Type) -> Type:
        return input

    def cat(self, path: string) -> bytes:
        return BinaryFile(path).read()

    def sum(self, ints: [i32]) -> i32:
        return sum(ints)

    def info(self) -> {string: string}:
        return {"foo": "1", "bar": "2"}

    def exit(self) -> string:
        self.bus.stop()

        return "Bye!"

def signal_counts(basic_1: BasicObject):
    count = 1

    while True:
        try:
            basic_1.signal_count(count)
        except Error:
            break

        sleep(1.0)
        count += 1

def main():
    bus = SessionBus()
    basic_1 = BasicObject("com.example.Basic", "/Basic1", BasicDemo(bus))
    bus.add_object_server(basic_1)
    bus.start()
    signal_counts(basic_1)
    bus.join()
