from dbus import SessionBus
from dbus.types import Double
from dbus.types import String
from dbus.types import Type
from fiber import Fiber
from fiber import sleep
from os.path import Path
from random.pseudo import randint
from .dbus_basic_server import BasicDemoInterface
from .dbus_basic_server import BasicObject

class BasicDemo(BasicDemoInterface):
    bus: SessionBus

    func random(self) -> i32:
        return i32(randint(0, 100))

    func hello(self, name: string) -> string:
        print(name)

        return "Hi!"

    func echo(self, input: Type) -> Type:
        return input

    func cat(self, path: string) -> bytes:
        return Path(path).read_binary()

    func sum(self, ints: [i32]) -> i32:
        return sum(ints)

    func info(self) -> {string: string}:
        return {"foo": "1", "bar": "2"}

    func exit(self) -> string:
        self.bus.stop()

        return "Bye!"

func signal_counts(basic_1: BasicObject):
    count = 1

    while True:
        try:
            basic_1.basic_demo.signal_count(count)
        except Error:
            break

        sleep(1.0)
        count += 1

func main():
    bus = SessionBus()
    basic_1 = BasicObject("org.example.Basic", "/Basic1", BasicDemo(bus))
    bus.add_object_server(basic_1)
    bus.start()
    signal_counts(basic_1)
    bus.join()
