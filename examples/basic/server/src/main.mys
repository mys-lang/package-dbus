from fiber import Fiber
from fiber import sleep
from dbus import SessionBus
from dbus.types import Double
from dbus.types import String
from .dbus_basic_server import BasicObject
from .dbus_basic_server import BasicDemoInterface

class BasicDemo(BasicDemoInterface):
    bus: SessionBus

    def random(self) -> i32:
        return randint()

    def hello(self, name: string) -> string:
        print(name)

        return "Hi!"

    def echo(self, input: Variant) -> Variant:
        return input

    def cat(self, file: string) -> bytes:
        return BinaryFile(file).read()

    def sum(self, ints: [i32]) -> i32:
        return sum(ints)

    def info(self) -> {string: string}:
        return {"foo": "1", "bar": "2"}

    def exit(self) -> string:
        self.bus.stop()

        return "Bye!"

def signal_counts(server):
    count = 1

    while True:
        try:
            server.signal_count(count)
        except Error:
            break

        sleep(1.0)
        count += 1

def main():
    bus = SessionBus()
    server = BasicObject(BasicDemo(bus))
    bus.add_object_server("com.example.Basic", "/Basic1", server)
    bus.start()
    signal_counts(server)
    bus.join()
