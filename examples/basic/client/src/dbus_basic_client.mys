# This file was genrated by dbus.py.

from dbus.client import Object
from dbus.types import Type
from dbus.types import Byte
from dbus.types import Int32
from dbus.types import Uint32
from dbus.types import String
from dbus.types import Array
from dbus.types import Struct
from dbus.types import Byte
from dbus.marshaling import marshal

@trait
class BasicDemoInterface:

    def count(self, value: i64):
        pass

# class BasicObjectHandler(Object):
#     basic_demo: BasicDemoInterface
#
#     def on_message(self, data: Reader):
#         match name:
#             case "Random":
#                 self.basic_demo.random()
#             case "Echo":
#                 output = self.basic_demo.basic(data.read_string())
#             case "Cat":
#                 output = self.basic_demo.cat(data.read_string())
#             case "Sum":
#                 output = self.basic_demo.cat(data.read_array_i32())

class BasicObject(Object):

    def __init__(self,
                 bus_name: string,
                 path: string,
                 basic_demo_interface: BasicDemoInterface):
        pass

    def call(self, method: string, argument: Type, returns: Type) -> Type:
        header = Struct([
            Byte(u8(i32('B'))),
            Byte(1),
            Byte(0),
            Byte(1),
            Uint32(0),
            Uint32(3),
            Array([])
        ])
        print("Method:")
        print(" ", method)
        print("  Header:")
        print("   ", header)
        print("   ", marshal(header))

        if argument is not None:
            print("  Argument:")
            print("   ", argument)
            print("   ", marshal(argument))

        return returns

    def random(self) -> i32:
        result = self.call("Random", None, Int32(5))

        return result.to_int32()

    def hello(self, name: string) -> string:
        result = self.call("Hello", String(name), String("Hoho!"))

        return result.to_string()

    def echo(self, input: Type) -> Type:
        return self.call("Echo", input, String("Variant"))

    def cat(self, path: string) -> bytes:
        result = self.call("Cat", String(path), Array([Byte(1), Byte(2)]))
        data = b""

        for byte in result.to_array():
            data += byte.to_byte()

        return data

    def sum(self, ints: [i32]) -> i32:
        result = self.call("Sum",
                           Array([Int32(item) for item in ints]),
                           Int32(5))

        return result.to_int32()

    def info(self) -> {string: string}:
        raise NotImplementedError()

    def exit(self) -> string:
        raise NotImplementedError()
