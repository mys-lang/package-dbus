from fiber import Fiber
from fiber import current
from fiber import resume
from fiber import suspend
from .client import Object as ClientObject
from .marshaling import marshal
from .marshaling import unmarshal
from .message import HeaderFields
from .message import Type as MessageType
from .message import HEADER_SIGNATURE
from .server import Object as ServerObject
from .types import Array
from .types import Byte
from .types import ObjectPath
from .types import Signature
from .types import String
from .types import Struct
from .types import Type
from .types import Uint32

_PROTOCOL_VERSION: u8 = 1

class CallError(Error):
    """A call failed with an error.

    """

    error_name: string
    message: string

trait SignalHandler:
    pass

trait Bus:
    pass

class _Completion:
    fiber: Fiber
    message: _Message?

class _Message:
    big_endian: bool
    type: MessageType
    serial: u32
    body: bytes
    path: string?
    destination: string?
    interface: string?
    member: string?
    signature: string?
    error_name: string?

    func __init__(self,
                 big_endian: bool,
                 type: MessageType,
                 serial: u32,
                 body: bytes):
        self.big_endian = big_endian
        self.type = type
        self.serial = serial
        self.body = body
        self.path = None
        self.destination = None
        self.interface = None
        self.member = None
        self.signature = None

class _MessageReader(Fiber):
    _completions: {u32: _Completion?}

    func __init__(self, completions: {u32: _Completion}):
        self._completions = {k: v for k, v in completions}

    func run(self):
        while True:
            message = self._read_message()

            match message.type:
                case MessageType.MethodCall:
                    self._handle_method_call(message)
                case MessageType.MethodReturn:
                    self._handle_method_return_and_error(message)
                case MessageType.Error:
                    self._handle_method_return_and_error(message)
                case MessageType.Signal:
                    self._handle_signal(message)

    func _read(self, size: u32) -> bytes:
        raise NotImplementedError()

    func _read_message(self) -> _Message:
        data = self._read(16)

        if data[3] != _PROTOCOL_VERSION:
            raise NotImplementedError()

        big_endian = (data[0] == u8(i32('B')))

        if big_endian:
            header_fields_size = ((u32(data[13]) << 24)
                                  | (u32(data[14]) << 16)
                                  | (u32(data[15]) << 8)
                                  | (u32(data[16]) << 0))
        else:
            header_fields_size = ((u32(data[13]) << 0)
                                  | (u32(data[14]) << 8)
                                  | (u32(data[15]) << 16)
                                  | (u32(data[16]) << 24))

        header_fields_size += 7
        header_fields_size &= ~0x7

        data += self._read(header_fields_size)
        header = unmarshal(HEADER_SIGNATURE, data, big_endian)
        message = _Message(big_endian,
                           MessageType(header[1].to_byte()),
                           header[5].to_uint32(),
                           self._read(header[4].to_uint32()))

        for header_field in header[6].to_array():
            item = header_field.to_struct()
            field = HeaderFields(item[0].to_byte())
            value = item[1].to_variant()[1]

            match field:
                case HeaderFields.Path:
                    message.path = value.to_object_path()
                case HeaderFields.Destination:
                    message.destination = value.to_string()
                case HeaderFields.Interface:
                    message.interface = value.to_string()
                case HeaderFields.Member:
                    message.member = value.to_string()
                case HeaderFields.ErrorName:
                    message.error_name = value.to_string()
                case HeaderFields.Signature:
                    message.signature = value.to_signature()

        return message

    func _handle_method_call(self, message: _Message):
        raise NotImplementedError()

    func _handle_method_return_and_error(self, message: _Message):
        completion = self._completions.pop(message.serial, None)

        if completion is None:
            return

        completion.message = message
        resume(completion.fiber)

    func _handle_signal(self, message: _Message):
        raise NotImplementedError()

func _build_header(serial: u32,
                  message_type: MessageType,
                  body: bytes,
                  header_fields: [Type]) -> [Type]:
    return [
        Byte(u8(i32('B'))),
        Byte(u8(message_type)),
        Byte(0),
        Byte(_PROTOCOL_VERSION),
        Uint32(u32(body.length())),
        Uint32(serial),
        Array(header_fields)
    ]

class SessionBus(Bus):
    _serial: u32
    _completions: {u32: _Completion}
    _message_reader: _MessageReader?

    func __init__(self):
        self._serial = 0
        self._completions = {}
        self._message_reader = None

    func start(self):
        """Connect to the bus.

        """

        self._completions.clear()
        self._message_reader = _MessageReader(self._completions)
        self._message_reader.start()

    func stop(self):
        """Disconnect from the bus once all ongoing calls have completed.

        """

    func join(self):
        """Wait for the bus to be stopped.

        """

    func add_object_client(self, object: ClientObject):
        """Add given client object.

        """

    func add_object_server(self, object: ServerObject):
        """Add given server object.

        """

    func add_signal_handler(self, handler: SignalHandler):
        pass

    func call(self,
             destination: string,
             object_path: string,
             interface: string,
             method: string,
             signature: string,
             arguments: [Type]) -> [Type]:
        """Call given method on given object.

        """

        serial = self._next_serial()
        body = marshal(arguments)
        header = _build_header(
            serial,
            MessageType.MethodCall,
            body,
            [
                Struct([Byte(u8(HeaderFields.Path)), ObjectPath(object_path)]),
                Struct([Byte(u8(HeaderFields.Interface)), String(interface)]),
                Struct([Byte(u8(HeaderFields.Destination)), String(destination)]),
                Struct([Byte(u8(HeaderFields.Member)), String(method)]),
                Struct([Byte(u8(HeaderFields.Signature)), Signature(signature)])
            ])
        message = marshal(header, align=8)
        message += body

        completion = _Completion(current(), None)
        self._completions[serial] = completion
        self._write(message)
        suspend()

        returned = unmarshal(completion.message.signature,
                             completion.message.body,
                             completion.message.big_endian)

        if completion.message.type == MessageType.MethodReturn:
            return returned
        else:
            if returned.length() == 0:
                error_message = ""
            else:
                error_message = returned[0].to_struct()[1].to_string()

            raise CallError(completion.message.error_name, error_message)

    func emit(self,
             object_path: string,
             interface: string,
             signal: string,
             signature: string,
             arguments: [Type]):
        """Emit given signal from given object.

        """

        body = marshal(arguments)
        header = _build_header(
            self._next_serial(),
            MessageType.Signal,
            body,
            [
                Struct([Byte(u8(HeaderFields.Path)), ObjectPath(object_path)]),
                Struct([Byte(u8(HeaderFields.Interface)), String(interface)]),
                Struct([Byte(u8(HeaderFields.Member)), String(signal)]),
                Struct([Byte(u8(HeaderFields.Signature)), Signature(signature)])
            ])
        message = marshal(header, align=8)
        message += body

        self._write(message)

    func _next_serial(self) -> u32:
        self._serial += 1

        if self._serial == 0:
            self._serial = 1

        return self._serial

    func _write(self, message: bytes):
        pass
