from .types import Type
from .types import Byte
from .types import Boolean
from .types import Int16
from .types import Uint16
from .types import Int32
from .types import Uint32
from .types import Int64
from .types import Uint64
from .types import Double
from .types import String
from .types import ObjectPath
from .types import Signature
from .types import Array
from .types import Struct
from .types import Dict
from .types import Variant

class SignatureReader:
    _signature: string
    _pos: i64

    def __init__(self, signature: string):
        self._signature = signature
        self._pos = 0

    def get(self) -> char:
        value = self._signature[self._pos]
        self._pos += 1

        return value

    def available(self) -> bool:
        return self._pos < i64(len(self._signature))

class Reader:
    _data: bytes
    _pos: i64

    def __init__(self, data: bytes):
        self._data = data
        self._pos = 0

    def read_u8(self) -> u8:
        value = self._data[self._pos]
        self._pos += 1

        return value

    def read_i16(self) -> i16:
        return i16(self.read_u16())

    def read_u16(self) -> u16:
        self.align(2)

        value = u16(self.read_u8())
        value <<= 8
        value |= u16(self.read_u8())

        return value

    def read_i32(self) -> i32:
        return i32(self.read_u32())

    def read_u32(self) -> u32:
        self.align(4)

        value = u32(self.read_u16())
        value <<= 16
        value |= u32(self.read_u16())

        return value

    def read_i64(self) -> i64:
        return i64(self.read_u64())

    def read_u64(self) -> u64:
        self.align(8)

        value = u64(self.read_u32())
        value <<= 32
        value |= u64(self.read_u32())

        return value

    def read_f64(self) -> f64:
        value: f64 = 0.0
        value_u64 = self.read_u64()
        c"value = *((f64 *)(&value_u64));"

        return value

    def read_string(self) -> string:
        length = self.read_u32()
        value = b""

        for _ in range(i64(length)):
            value += self.read_u8()

        self.read_u8()

        return string(value)

    def read_signature(self) -> string:
        length = self.read_u8()
        value = b""

        for _ in range(i64(length)):
            value += self.read_u8()

        self.read_u8()

        return string(value)

    def align(self, alignment: i64):
        rest = (self._pos % alignment)

        if rest > 0:
            for _ in range(alignment - rest):
                self.read_u8()

class Writer:
    _data: bytes
    _pos: i64

    def __init__(self):
        self._data = b""
        self._pos = 0

    def write_u8(self, value: u8):
        self._data += value
        self._pos += 1

    def write_i16(self, value: i16):
        self.write_u16(u16(value))

    def write_u16(self, value: u16):
        self.align(2)
        self.write_u8(u8(value >> 8))
        self.write_u8(u8(value >> 0))

    def write_i32(self, value: i32):
        self.write_u32(u32(value))

    def write_u32(self, value: u32):
        self.align(4)
        self.write_u8(u8(value >> 24))
        self.write_u8(u8(value >> 16))
        self.write_u8(u8(value >> 8))
        self.write_u8(u8(value >> 0))

    def write_u32_at(self, pos: i64, value: u32):
        self._data[pos] = u8(value >> 24)
        self._data[pos + 1] = u8(value >> 16)
        self._data[pos + 2] = u8(value >> 8)
        self._data[pos + 3] = u8(value >> 0)

    def write_i64(self, value: i64):
        self.write_u64(u64(value))

    def write_u64(self, value: u64):
        self.align(8)
        self.write_u8(u8(value >> 56))
        self.write_u8(u8(value >> 48))
        self.write_u8(u8(value >> 40))
        self.write_u8(u8(value >> 32))
        self.write_u8(u8(value >> 24))
        self.write_u8(u8(value >> 16))
        self.write_u8(u8(value >> 8))
        self.write_u8(u8(value >> 0))

    def write_f64(self, value: f64):
        value_u64: u64 = 0
        c"value_u64 = *((u64 *)(&value));"
        self.write_u64(value_u64)

    def write_string(self, value: string):
        utf8 = value.to_utf8()
        self.write_u32(u32(len(utf8)))

        for i in range(i64(len(utf8))):
            self.write_u8(utf8[i])

        self.write_u8(0)

    def write_signature(self, value: string):
        utf8 = value.to_utf8()
        self.write_u8(u8(len(utf8)))

        for i in range(i64(len(utf8))):
            self.write_u8(utf8[i])

        self.write_u8(0)

    def get_pos(self) -> i64:
        return self._pos

    def align(self, alignment: i64):
        rest = (self._pos % alignment)

        if rest > 0:
            for _ in range(alignment - rest):
                self.write_u8(0)

    def finalize(self) -> bytes:
        return self._data

def _get_alignment(value: Type) -> i64:
    match value:
        case Byte():
            return 1
        case Boolean():
            return 4
        case Int16():
            return 2
        case Uint16():
            return 2
        case Int32():
            return 4
        case Uint32():
            return 4
        case Int64():
            return 8
        case Uint64():
            return 8
        case Double():
            return 8
        case String():
            return 4
        case ObjectPath():
            return 4
        case Signature():
            return 1
        case Array():
            return 4
        case Struct():
            return 8
        case Dict():
            return 8
        case _:
            raise NotImplementedError()

def _marshal_array(value: Array, writer: Writer):
    size_pos = writer.get_pos()
    writer.write_u32(0)
    data_pos = -1

    for item in value.to_array():
        writer.align(_get_alignment(item))

        if data_pos == -1:
            data_pos = writer.get_pos()

        _marshal(item, writer)

    if data_pos != -1:
        data_size = writer.get_pos() - data_pos
        writer.write_u32_at(size_pos, u32(data_size))

def _marshal_struct(value: Struct, writer: Writer):
    for item in value.to_struct():
        writer.align(_get_alignment(item))
        _marshal(item, writer)

def _marshal_dict(value: Dict, writer: Writer):
    _marshal_array(Array([Struct([k, v]) for k, v in value.to_dict()]), writer)

def _marshal_variant(value: Variant, writer: Writer):
    _marshal(Signature(value.signature), writer)
    _marshal(value.value, writer)

def _marshal(value: Type, writer: Writer):
    match value:
        case Byte() as byte:
            writer.write_u8(byte.value)
        case Boolean() as boolean:
            writer.write_u32(u32(boolean.value))
        case Int16() as int16:
            writer.write_i16(int16.value)
        case Uint16() as uint16:
            writer.write_u16(uint16.value)
        case Int32() as int32:
            writer.write_i32(int32.value)
        case Uint32() as uint32:
            writer.write_u32(uint32.value)
        case Int64() as int64:
            writer.write_i64(int64.value)
        case Uint64() as uint64:
            writer.write_u64(uint64.value)
        case Double() as double_:
            writer.write_f64(double_.value)
        case String() as string:
            writer.write_string(string.value)
        case ObjectPath() as object_path:
            writer.write_string(object_path.value)
        case Signature() as signature:
            writer.write_signature(signature.value)
        case Array() as array:
            _marshal_array(array, writer)
        case Struct() as struct_:
            _marshal_struct(struct_, writer)
        case Dict() as dict:
            _marshal_dict(dict, writer)
        case Variant() as variant:
            _marshal_variant(variant, writer)
        case _:
            raise NotImplementedError()

def _unmarshal_array(signature: SignatureReader, reader: Reader) -> Array:
    return Array([])

def _unmarshal_struct(signature: SignatureReader, reader: Reader) -> Struct:
    return Struct([])

def _unmarshal_variant(reader: Reader) -> Variant:
    return Variant("", None)

def _unmarshal_dict(signature: SignatureReader, reader: Reader) -> Dict:
    return Dict({})

def marshal(values: [Type], big_endian: bool = True) -> bytes:
    """Marshal given values.

    """

    writer = Writer()

    for value in values:
        _marshal(value, writer)

    return writer.finalize()

def _unmarshal(signature_reader: SignatureReader, reader: Reader) -> Type:
    match signature_reader.get():
        case 'y':
            return Byte(reader.read_u8())
        case 'b':
            return Boolean(reader.read_u32() != 0)
        case 'n':
            return Int16(reader.read_i16())
        case 'q':
            return Uint16(reader.read_u16())
        case 'i':
            return Int32(reader.read_i32())
        case 'u':
            return Uint32(reader.read_u32())
        case 'x':
            return Int64(reader.read_i64())
        case 't':
            return Uint64(reader.read_u64())
        case 'd':
            return Double(reader.read_f64())
        case 's':
            return String(reader.read_string())
        case 'o':
            return ObjectPath(reader.read_string())
        case 'g':
            return Signature(reader.read_signature())
        case 'a':
            return _unmarshal_array(signature_reader, reader)
        case '(':
            return _unmarshal_struct(signature_reader, reader)
        case 'v':
            return _unmarshal_variant(reader)
        case '{':
            return _unmarshal_dict(signature_reader, reader)
        case _:
            raise NotImplementedError()

def unmarshal(signature: string,
              data: bytes,
              big_endian: bool = True) -> [Type]:
    """Unmarshal given data using given signature.

    """

    signature_reader = SignatureReader(signature)
    reader = Reader(data)
    values = []

    while signature_reader.available():
        values.append(_unmarshal(signature_reader, reader))

    return values

def _marshal_pack_list(value: Type) -> bytes:
    return marshal([value])

def _unmarshal_unpack_list(signature: string, data: bytes) -> Type:
    value = unmarshal(signature, data)
    assert len(value) == 1

    return value[0]

@test
def test_marshal_byte():
    assert _marshal_pack_list(Byte(0x34)) == b"\x34"

@test
def test_unmarshal_byte():
    match _unmarshal_unpack_list("y", b"\x34"):
        case Byte() as value:
            assert value.value == 0x34
        case _:
            assert False

@test
def test_marshal_boolean():
    assert _marshal_pack_list(Boolean(False)) == b"\x00\x00\x00\x00"
    assert _marshal_pack_list(Boolean(True)) == b"\x00\x00\x00\x01"

@test
def test_unmarshal_boolean():
    match _unmarshal_unpack_list("b", b"\x00\x00\x00\x00"):
        case Boolean() as value:
            assert not value.value
        case _:
            assert False

    match _unmarshal_unpack_list("b", b"\x00\x00\x00\x01"):
        case Boolean() as value:
            assert value.value
        case _:
            assert False

@test
def test_marshal_int16():
    assert _marshal_pack_list(Int16(0x1234)) == b"\x12\x34"
    assert _marshal_pack_list(Int16(-2)) == b"\xff\xfe"

@test
def test_unmarshal_int16():
    match _unmarshal_unpack_list("n", b"\x12\x34"):
        case Int16() as value:
            assert value.value == 0x1234
        case _:
            assert False

    match _unmarshal_unpack_list("n", b"\xff\xfe"):
        case Int16() as value:
            assert value.value == -2
        case _:
            assert False

@test
def test_marshal_uint16():
    assert _marshal_pack_list(Uint16(0x1234)) == b"\x12\x34"

@test
def test_unmarshal_uint16():
    match _unmarshal_unpack_list("q", b"\x12\x34"):
        case Uint16() as value:
            assert value.value == 0x1234
        case _:
            assert False

@test
def test_marshal_int32():
    assert _marshal_pack_list(Int32(0x12345678)) == b"\x12\x34\x56\x78"
    assert _marshal_pack_list(Int32(-2)) == b"\xff\xff\xff\xfe"

@test
def test_unmarshal_int32():
    match _unmarshal_unpack_list("i", b"\x12\x34\x56\x78"):
        case Int32() as value:
            assert value.value == 0x12345678
        case _:
            assert False

    match _unmarshal_unpack_list("i", b"\xff\xff\xff\xfe"):
        case Int32() as value:
            assert value.value == -2
        case _:
            assert False

@test
def test_marshal_uint32():
    assert _marshal_pack_list(Uint32(0x12345678)) == b"\x12\x34\x56\x78"

@test
def test_unmarshal_uint32():
    match _unmarshal_unpack_list("u", b"\x12\x34\x56\x78"):
        case Uint32() as value:
            assert value.value == 0x12345678
        case _:
            assert False

@test
def test_marshal_int64():
    assert _marshal_pack_list(Int64(0x12345678abcdef)) == b"\x00\x12\x34\x56\x78\xab\xcd\xef"
    assert _marshal_pack_list(Int64(-2)) == b"\xff\xff\xff\xff\xff\xff\xff\xfe"

@test
def test_unmarshal_int64():
    match _unmarshal_unpack_list("x", b"\x00\x12\x34\x56\x78\xab\xcd\xef"):
        case Int64() as value:
            assert value.value == 0x12345678abcdef
        case _:
            assert False

    match _unmarshal_unpack_list("x", b"\xff\xff\xff\xff\xff\xff\xff\xfe"):
        case Int64() as value:
            assert value.value == -2
        case _:
            assert False

@test
def test_marshal_uint64():
    assert _marshal_pack_list(Uint64(0x12345678abcdef)) == b"\x00\x12\x34\x56\x78\xab\xcd\xef"

@test
def test_unmarshal_uint64():
    match _unmarshal_unpack_list("t", b"\x00\x12\x34\x56\x78\xab\xcd\xef"):
        case Uint64() as value:
            assert value.value == 0x12345678abcdef
        case _:
            assert False

@test
def test_marshal_double():
    assert _marshal_pack_list(Double(0.0)) == b"\x00\x00\x00\x00\x00\x00\x00\x00"
    assert _marshal_pack_list(Double(1.0)) == b"\x3f\xf0\x00\x00\x00\x00\x00\x00"
    assert _marshal_pack_list(Double(125.6)) == b"\x40\x5f\x66\x66\x66\x66\x66\x66"

@test
def test_unmarshal_double():
    match _unmarshal_unpack_list("d", b"\x00\x00\x00\x00\x00\x00\x00\x00"):
        case Double() as value:
            assert value.value == 0.0
        case _:
            assert False

    match _unmarshal_unpack_list("d", b"\x3f\xf0\x00\x00\x00\x00\x00\x00"):
        case Double() as value:
            assert value.value == 1.0
        case _:
            assert False

    match _unmarshal_unpack_list("d", b"\x40\x5f\x66\x66\x66\x66\x66\x66"):
        case Double() as value:
            assert value.value == 125.6
        case _:
            assert False

@test
def test_marshal_string():
    assert _marshal_pack_list(String("")) == b"\x00\x00\x00\x00\x00"
    assert _marshal_pack_list(String("foo")) == b"\x00\x00\x00\x03\x66\x6f\x6f\x00"

@test
def test_unmarshal_string():
    match _unmarshal_unpack_list("s", b"\x00\x00\x00\x00\x00"):
        case String() as value:
            assert value.value == ""
        case _:
            assert False

    match _unmarshal_unpack_list("s", b"\x00\x00\x00\x03\x66\x6f\x6f\x00"):
        case String() as value:
            assert value.value == "foo"
        case _:
            assert False

@test
def test_marshal_object_path():
    assert _marshal_pack_list(ObjectPath("/Example")) == (
        b"\x00\x00\x00\x08\x2f\x45\x78\x61\x6d\x70\x6c\x65\x00")

@test
def test_unmarshal_object_path():
    match _unmarshal_unpack_list(
        "o",
        b"\x00\x00\x00\x08\x2f\x45\x78\x61\x6d\x70\x6c\x65\x00"):
        case ObjectPath() as value:
            assert value.value == "/Example"
        case _:
            assert False

@test
def test_marshal_signature():
    assert _marshal_pack_list(Signature("usi")) == b"\x03\x75\x73\x69\x00"

@test
def test_unmarshal_signature():
    match _unmarshal_unpack_list("g", b"\x03\x75\x73\x69\x00"):
        case Signature() as value:
            assert value.value == "usi"
        case _:
            assert False

@test
def test_marshal_array_int64():
    assert _marshal_pack_list(Array([Int64(5)])) == (
        b"\x00\x00\x00\x08"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x05")
    assert _marshal_pack_list(Array([Int64(5), Int64(7)])) == (
        b"\x00\x00\x00\x10"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x05"
        b"\x00\x00\x00\x00\x00\x00\x00\x07")

@test
def test_marshal_array_int32():
    assert _marshal_pack_list(Array([Int32(5), Int32(7)])) == (
        b"\x00\x00\x00\x08"
        b"\x00\x00\x00\x05"
        b"\x00\x00\x00\x07")

@test
def test_marshal_struct_header():
    header = Struct([
        Byte(u8(i32('B'))),
        Byte(1),
        Byte(0),
        Byte(1),
        Uint32(0),
        Uint32(3),
        Array([])
    ])
    assert _marshal_pack_list(header) == (
        b"\x42\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00")

@test
def test_marshal_variant():
    assert _marshal_pack_list(Variant("i", Int32(5))) == b"\x01\x69\x00\x00\x00\x00\x00\x05"

@test
def test_marshal_dict():
    value = Dict({String("foo"): String("1"),
                  String("bar"): String("2")})
    marshalled = _marshal_pack_list(value)
    foo_before_bar = (
        b"\x00\x00\x00\x1e"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x03\x66\x6f\x6f\x00\x00\x00\x00\x01\x31\x00\x00\x00"
        b"\x00\x00\x00\x03\x62\x61\x72\x00\x00\x00\x00\x01\x32\x00")
    bar_before_foo = (
        b"\x00\x00\x00\x1e"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x03\x62\x61\x72\x00\x00\x00\x00\x01\x32\x00\x00\x00"
        b"\x00\x00\x00\x03\x66\x6f\x6f\x00\x00\x00\x00\x01\x31\x00")
    assert marshalled in [foo_before_bar, bar_before_foo]
