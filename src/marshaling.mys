from .types import Array
from .types import Boolean
from .types import Byte
from .types import Dict
from .types import Double
from .types import Int16
from .types import Int32
from .types import Int64
from .types import ObjectPath
from .types import Signature
from .types import String
from .types import Struct
from .types import Type
from .types import Uint16
from .types import Uint32
from .types import Uint64
from .types import Variant

func marshal(values: [Type], big_endian: bool = True, align: i64 = 1) -> bytes:
    """Marshal given values.

    """

    writer = Writer(big_endian)

    for value in values:
        _marshal(value, writer)

    writer.align(align)

    return writer.finalize()

func unmarshal(signature: string,
              data: bytes,
              big_endian: bool = True) -> [Type]:
    """Unmarshal given data using given signature.

    """

    signature_reader = SignatureReader(signature)
    reader = Reader(data, big_endian)
    values = []

    while signature_reader.available():
        values.append(_unmarshal(signature_reader, reader))

    return values

class MarshalingError(Error):
    message: string

class SignatureReader:
    _signature: string
    _pos: i64

    func __init__(self, signature: string):
        self._signature = signature
        self._pos = 0

    func get(self) -> char:
        value = self.peek()
        self._pos += 1

        return value

    func peek(self) -> char:
        if not self.available():
            raise MarshalingError("Out of signature characters.")

        return self._signature[self._pos]

    func available(self) -> bool:
        return self._pos < self._signature.length()

    func tell(self) -> i64:
        return self._pos

    func seek(self, pos: i64):
        self._pos = pos

    func skip_single_complete_type(self):
        self._skip_single_complete_type()

    func _skip_single_complete_type(self):
        match self.get():
            case 'y':
                pass
            case 'b':
                pass
            case 'n':
                pass
            case 'q':
                pass
            case 'i':
                pass
            case 'u':
                pass
            case 'x':
                pass
            case 't':
                pass
            case 'd':
                pass
            case 's':
                pass
            case 'o':
                pass
            case 'g':
                pass
            case 'a':
                self._skip_single_complete_type()
            case '(':
                while self.peek() != ')':
                    self._skip_single_complete_type()

                self.get()
            case 'v':
                pass
            case '{':
                self._skip_single_complete_type()
                self._skip_single_complete_type()

                if self.get() != '}':
                    raise MarshalingError("Invalid dict signature end.")
            case _ as ch:
                raise MarshalingError(f"Unexpectd signature character '{ch}'.")

class Reader:
    _data: bytes
    _pos: i64
    _big_endian: bool

    func __init__(self, data: bytes, big_endian: bool):
        self._data = data
        self._pos = 0
        self._big_endian = big_endian

    func available(self) -> bool:
        return self._pos < self._data.length()

    func read_u8(self) -> u8:
        if not self.available():
            raise MarshalingError("Out of data.")

        value = self._data[self._pos]
        self._pos += 1

        return value

    func read_i16(self) -> i16:
        return i16(self.read_u16())

    func read_u16(self) -> u16:
        self.align(2)

        if self._big_endian:
            value = u16(self.read_u8()) << 8
            value |= u16(self.read_u8())
        else:
            value = u16(self.read_u8())
            value |= u16(self.read_u8()) << 8

        return value

    func read_i32(self) -> i32:
        return i32(self.read_u32())

    func read_u32(self) -> u32:
        self.align(4)

        if self._big_endian:
            value = u32(self.read_u16()) << 16
            value |= u32(self.read_u16())
        else:
            value = u32(self.read_u16())
            value |= u32(self.read_u16()) << 16

        return value

    func read_i64(self) -> i64:
        return i64(self.read_u64())

    func read_u64(self) -> u64:
        self.align(8)

        if self._big_endian:
            value = u64(self.read_u32()) << 32
            value |= u64(self.read_u32())
        else:
            value = u64(self.read_u32())
            value |= u64(self.read_u32()) << 32

        return value

    func read_f64(self) -> f64:
        value: f64 = 0.0
        value_u64 = self.read_u64()
        c"value = *((f64 *)(&value_u64));"

        return value

    func read_string(self) -> string:
        length = self.read_u32()
        value = b""

        for _ in range(i64(length)):
            value += self.read_u8()

        self.read_u8()

        return string(value)

    func read_signature(self) -> string:
        length = self.read_u8()
        value = b""

        for _ in range(i64(length)):
            value += self.read_u8()

        self.read_u8()

        return string(value)

    func align(self, alignment: i64):
        rest = (self._pos % alignment)

        if rest > 0:
            for _ in range(alignment - rest):
                self.read_u8()

    func tell(self) -> i64:
        return self._pos

class Writer:
    _data: bytes
    _pos: i64
    _big_endian: bool

    func __init__(self, big_endian: bool):
        self._data = b""
        self._pos = 0
        self._big_endian = big_endian

    func write_u8(self, value: u8):
        self._data += value
        self._pos += 1

    func write_i16(self, value: i16):
        self.write_u16(u16(value))

    func write_u16(self, value: u16):
        self.align(2)

        if self._big_endian:
            self.write_u8(u8(value >> 8))
            self.write_u8(u8(value >> 0))
        else:
            self.write_u8(u8(value >> 0))
            self.write_u8(u8(value >> 8))

    func write_i32(self, value: i32):
        self.write_u32(u32(value))

    func write_u32(self, value: u32):
        self.align(4)

        if self._big_endian:
            self.write_u8(u8(value >> 24))
            self.write_u8(u8(value >> 16))
            self.write_u8(u8(value >> 8))
            self.write_u8(u8(value >> 0))
        else:
            self.write_u8(u8(value >> 0))
            self.write_u8(u8(value >> 8))
            self.write_u8(u8(value >> 16))
            self.write_u8(u8(value >> 24))

    func write_u32_at(self, pos: i64, value: u32):
        if self._big_endian:
            self._data[pos] = u8(value >> 24)
            self._data[pos + 1] = u8(value >> 16)
            self._data[pos + 2] = u8(value >> 8)
            self._data[pos + 3] = u8(value >> 0)
        else:
            self._data[pos] = u8(value >> 0)
            self._data[pos + 1] = u8(value >> 8)
            self._data[pos + 2] = u8(value >> 16)
            self._data[pos + 3] = u8(value >> 24)

    func write_i64(self, value: i64):
        self.write_u64(u64(value))

    func write_u64(self, value: u64):
        self.align(8)

        if self._big_endian:
            self.write_u8(u8(value >> 56))
            self.write_u8(u8(value >> 48))
            self.write_u8(u8(value >> 40))
            self.write_u8(u8(value >> 32))
            self.write_u8(u8(value >> 24))
            self.write_u8(u8(value >> 16))
            self.write_u8(u8(value >> 8))
            self.write_u8(u8(value >> 0))
        else:
            self.write_u8(u8(value >> 0))
            self.write_u8(u8(value >> 8))
            self.write_u8(u8(value >> 16))
            self.write_u8(u8(value >> 24))
            self.write_u8(u8(value >> 32))
            self.write_u8(u8(value >> 40))
            self.write_u8(u8(value >> 48))
            self.write_u8(u8(value >> 56))

    func write_f64(self, value: f64):
        value_u64: u64 = 0
        c"value_u64 = *((u64 *)(&value));"
        self.write_u64(value_u64)

    func write_string(self, value: string):
        utf8 = value.to_utf8()
        self.write_u32(u32(utf8.length()))

        for i in range(utf8.length()):
            self.write_u8(utf8[i])

        self.write_u8(0)

    func write_signature(self, value: string):
        utf8 = value.to_utf8()
        self.write_u8(u8(utf8.length()))

        for i in range(utf8.length()):
            self.write_u8(utf8[i])

        self.write_u8(0)

    func get_pos(self) -> i64:
        return self._pos

    func align(self, alignment: i64):
        rest = (self._pos % alignment)

        if rest > 0:
            for _ in range(alignment - rest):
                self.write_u8(0)

    func finalize(self) -> bytes:
        return self._data

func _get_alignment(value: Type) -> i64:
    match value:
        case Byte():
            return 1
        case Boolean():
            return 4
        case Int16():
            return 2
        case Uint16():
            return 2
        case Int32():
            return 4
        case Uint32():
            return 4
        case Int64():
            return 8
        case Uint64():
            return 8
        case Double():
            return 8
        case String():
            return 4
        case ObjectPath():
            return 4
        case Signature():
            return 1
        case Array():
            return 4
        case Struct():
            return 8
        case Dict():
            return 8
        case _:
            raise UnreachableError()

func _marshal_array(value: Array, writer: Writer):
    values = value.to_array()

    if values.length() == 0:
        writer.write_u32(0)
    else:
        size_pos = writer.get_pos()
        writer.write_u32(0)
        writer.align(_get_alignment(values[0]))
        items_pos = writer.get_pos()

        for item in values:
            _marshal(item, writer)

        data_size = writer.get_pos() - items_pos
        writer.write_u32_at(size_pos, u32(data_size))

func _marshal_struct(value: Struct, writer: Writer):
    writer.align(8)

    for item in value.to_struct():
        _marshal(item, writer)

func _marshal_dict(value: Dict, writer: Writer):
    _marshal_array(Array([Struct([k, v]) for k, v in value.to_dict()]), writer)

func _marshal_variant(value: Variant, writer: Writer):
    _marshal(Signature(value.signature), writer)
    _marshal(value.value, writer)

func _marshal(value: Type, writer: Writer):
    match value:
        case Byte() as byte:
            writer.write_u8(byte.value)
        case Boolean() as boolean:
            writer.write_u32(u32(boolean.value))
        case Int16() as int16:
            writer.write_i16(int16.value)
        case Uint16() as uint16:
            writer.write_u16(uint16.value)
        case Int32() as int32:
            writer.write_i32(int32.value)
        case Uint32() as uint32:
            writer.write_u32(uint32.value)
        case Int64() as int64:
            writer.write_i64(int64.value)
        case Uint64() as uint64:
            writer.write_u64(uint64.value)
        case Double() as double_:
            writer.write_f64(double_.value)
        case String() as string:
            writer.write_string(string.value)
        case ObjectPath() as object_path:
            writer.write_string(object_path.value)
        case Signature() as signature:
            writer.write_signature(signature.value)
        case Array() as array:
            _marshal_array(array, writer)
        case Struct() as struct_:
            _marshal_struct(struct_, writer)
        case Dict() as dict:
            _marshal_dict(dict, writer)
        case Variant() as variant:
            _marshal_variant(variant, writer)
        case _:
            raise UnreachableError()

func _unmarshal_array(signature_reader: SignatureReader, reader: Reader) -> Array:
    item_pos = signature_reader.tell()
    end = i64(reader.read_u32()) + reader.tell()
    values = []

    while reader.tell() < end:
        values.append(_unmarshal(signature_reader, reader))
        signature_reader.seek(item_pos)

    signature_reader.skip_single_complete_type()

    return Array(values)

func _unmarshal_struct(signature_reader: SignatureReader, reader: Reader) -> Struct:
    reader.align(8)
    values = []

    while signature_reader.peek() != ')':
        values.append(_unmarshal(signature_reader, reader))

    signature_reader.get()

    return Struct(values)

func _unmarshal_variant(reader: Reader) -> Variant:
    signature = reader.read_signature()
    value = _unmarshal(SignatureReader(signature), reader)

    return Variant(signature, value)

func _unmarshal_dict(signature_reader: SignatureReader, reader: Reader) -> Dict:
    item_pos = signature_reader.tell()
    end = i64(reader.read_u32()) + reader.tell()
    values: {Type: Type} = {}

    while reader.tell() < end:
        reader.align(8)
        key = _unmarshal(signature_reader, reader)
        value = _unmarshal(signature_reader, reader)
        values[key] = value
        signature_reader.seek(item_pos)

    signature_reader.skip_single_complete_type()
    signature_reader.skip_single_complete_type()

    if signature_reader.get() != '}':
        raise MarshalingError("Invalid dict signature end.")

    return Dict(values)

func _unmarshal(signature_reader: SignatureReader, reader: Reader) -> Type:
    match signature_reader.get():
        case 'y':
            return Byte(reader.read_u8())
        case 'b':
            return Boolean(reader.read_u32() != 0)
        case 'n':
            return Int16(reader.read_i16())
        case 'q':
            return Uint16(reader.read_u16())
        case 'i':
            return Int32(reader.read_i32())
        case 'u':
            return Uint32(reader.read_u32())
        case 'x':
            return Int64(reader.read_i64())
        case 't':
            return Uint64(reader.read_u64())
        case 'd':
            return Double(reader.read_f64())
        case 's':
            return String(reader.read_string())
        case 'o':
            return ObjectPath(reader.read_string())
        case 'g':
            return Signature(reader.read_signature())
        case 'a':
            return _unmarshal_array(signature_reader, reader)
        case '(':
            return _unmarshal_struct(signature_reader, reader)
        case 'v':
            return _unmarshal_variant(reader)
        case '{':
            return _unmarshal_dict(signature_reader, reader)
        case _ as ch:
            raise MarshalingError(f"Unexpectd signature character '{ch}'.")

func _marshal_pack_list(value: Type, big_endian: bool = True) -> bytes:
    return marshal([value], big_endian)

func _unmarshal_unpack_list(signature: string,
                           data: bytes,
                           big_endian: bool = True) -> Type:
    value = unmarshal(signature, data, big_endian)
    assert value.length() == 1

    return value[0]

test marshal_byte():
    assert _marshal_pack_list(Byte(0x34)) == b"\x34"

test unmarshal_byte():
    assert _unmarshal_unpack_list("y", b"\x34").to_byte() == 0x34

test marshal_boolean():
    assert _marshal_pack_list(Boolean(False)) == b"\x00\x00\x00\x00"
    assert _marshal_pack_list(Boolean(True)) == b"\x00\x00\x00\x01"

test unmarshal_boolean():
    assert not _unmarshal_unpack_list("b", b"\x00\x00\x00\x00").to_boolean()
    assert _unmarshal_unpack_list("b", b"\x00\x00\x00\x01").to_boolean()

test marshal_int16():
    assert _marshal_pack_list(Int16(0x1234)) == b"\x12\x34"
    assert _marshal_pack_list(Int16(-2)) == b"\xff\xfe"

test unmarshal_int16():
    assert _unmarshal_unpack_list("n", b"\x12\x34").to_int16() == 0x1234
    assert _unmarshal_unpack_list("n", b"\xff\xfe").to_int16() == -2

test marshal_uint16():
    assert _marshal_pack_list(Uint16(0x1234)) == b"\x12\x34"
    assert _marshal_pack_list(Uint16(0x1234), False) == b"\x34\x12"

test unmarshal_uint16():
    assert _unmarshal_unpack_list("q", b"\x12\x34").to_uint16() == 0x1234
    assert _unmarshal_unpack_list("q", b"\x34\x12", False).to_uint16() == 0x1234

test marshal_int32():
    assert _marshal_pack_list(Int32(0x12345678)) == b"\x12\x34\x56\x78"
    assert _marshal_pack_list(Int32(-2)) == b"\xff\xff\xff\xfe"

test unmarshal_int32():
    assert _unmarshal_unpack_list("i", b"\x12\x34\x56\x78").to_int32() == 0x12345678
    assert _unmarshal_unpack_list("i", b"\xff\xff\xff\xfe").to_int32() == -2

test marshal_uint32():
    assert _marshal_pack_list(Uint32(0x12345678)) == b"\x12\x34\x56\x78"
    assert _marshal_pack_list(Uint32(0x12345678), False) == b"\x78\x56\x34\x12"

test unmarshal_uint32():
    assert _unmarshal_unpack_list("u", b"\x12\x34\x56\x78").to_uint32() == 0x12345678

test marshal_int64():
    assert _marshal_pack_list(Int64(0x12345678abcdef)) == (
        b"\x00\x12\x34\x56\x78\xab\xcd\xef")
    assert _marshal_pack_list(Int64(-2)) == b"\xff\xff\xff\xff\xff\xff\xff\xfe"

test unmarshal_int64():
    assert _unmarshal_unpack_list(
        "x",
        b"\x00\x12\x34\x56\x78\xab\xcd\xef").to_int64() == 0x12345678abcdef
    assert _unmarshal_unpack_list(
        "x",
        b"\xff\xff\xff\xff\xff\xff\xff\xfe").to_int64() == -2

test marshal_uint64():
    assert _marshal_pack_list(Uint64(0x12345678abcdef)) == (
        b"\x00\x12\x34\x56\x78\xab\xcd\xef")
    assert _marshal_pack_list(Uint64(0x12345678abcdef), False) == (
        b"\xef\xcd\xab\x78\x56\x34\x12\x00")

test unmarshal_uint64():
    assert _unmarshal_unpack_list(
        "t",
        b"\x00\x12\x34\x56\x78\xab\xcd\xef").to_uint64() == 0x12345678abcdef
    assert _unmarshal_unpack_list(
        "t",
        b"\xef\xcd\xab\x78\x56\x34\x12\x00",
        False).to_uint64() == 0x12345678abcdef

test marshal_double():
    assert _marshal_pack_list(Double(0.0)) == b"\x00\x00\x00\x00\x00\x00\x00\x00"
    assert _marshal_pack_list(Double(1.0)) == b"\x3f\xf0\x00\x00\x00\x00\x00\x00"
    assert _marshal_pack_list(Double(125.6)) == b"\x40\x5f\x66\x66\x66\x66\x66\x66"

test unmarshal_double():
    assert _unmarshal_unpack_list(
        "d",
        b"\x00\x00\x00\x00\x00\x00\x00\x00").to_double() == 0.0
    assert _unmarshal_unpack_list(
        "d",
        b"\x3f\xf0\x00\x00\x00\x00\x00\x00").to_double() == 1.0
    assert _unmarshal_unpack_list(
        "d",
        b"\x40\x5f\x66\x66\x66\x66\x66\x66").to_double() == 125.6

test marshal_string():
    assert _marshal_pack_list(String("")) == b"\x00\x00\x00\x00\x00"
    assert _marshal_pack_list(String("foo")) == b"\x00\x00\x00\x03\x66\x6f\x6f\x00"

test unmarshal_string():
    assert _unmarshal_unpack_list("s", b"\x00\x00\x00\x00\x00").to_string() == ""
    assert _unmarshal_unpack_list(
        "s",
        b"\x00\x00\x00\x03\x66\x6f\x6f\x00").to_string() == "foo"

test marshal_object_path():
    assert _marshal_pack_list(ObjectPath("/Example")) == (
        b"\x00\x00\x00\x08\x2f\x45\x78\x61\x6d\x70\x6c\x65\x00")

test unmarshal_object_path():
    assert _unmarshal_unpack_list(
        "o",
        b"\x00\x00\x00\x08\x2f\x45\x78\x61\x6d\x70\x6c\x65\x00"
    ).to_object_path() == "/Example"

test marshal_signature():
    assert _marshal_pack_list(Signature("usi")) == b"\x03\x75\x73\x69\x00"

test unmarshal_signature():
    assert _unmarshal_unpack_list("g", b"\x03\x75\x73\x69\x00").to_signature() == "usi"

test marshal_array_int64():
    assert _marshal_pack_list(Array([Int64(5)])) == (
        b"\x00\x00\x00\x08"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x05")
    assert _marshal_pack_list(Array([Int64(5), Int64(7)])) == (
        b"\x00\x00\x00\x10"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x05"
        b"\x00\x00\x00\x00\x00\x00\x00\x07")

test unmarshal_array_int64():
    values = _unmarshal_unpack_list("ax",
                                    b"\x00\x00\x00\x08"
                                    b"\x00\x00\x00\x00"
                                    b"\x00\x00\x00\x00\x00\x00\x00\x05").to_array()
    assert values.length() == 1
    assert values[0].to_int64() == 5

    values = _unmarshal_unpack_list("ax",
                                    b"\x00\x00\x00\x10"
                                    b"\x00\x00\x00\x00"
                                    b"\x00\x00\x00\x00\x00\x00\x00\x05"
                                    b"\x00\x00\x00\x00\x00\x00\x00\x07").to_array()
    assert values.length() == 2
    assert values[0].to_int64() == 5
    assert values[1].to_int64() == 7

test marshal_array_int32():
    assert _marshal_pack_list(Array([Int32(5), Int32(7)])) == (
        b"\x00\x00\x00\x08"
        b"\x00\x00\x00\x05"
        b"\x00\x00\x00\x07")

test unmarshal_array_int32():
    values = _unmarshal_unpack_list("ai",
                                    b"\x00\x00\x00\x08"
                                    b"\x00\x00\x00\x05"
                                    b"\x00\x00\x00\x07").to_array()
    assert values.length() == 2
    assert values[0].to_int32() == 5
    assert values[1].to_int32() == 7

test marshal_struct_header():
    header = Struct([
        Byte(0x42),
        Byte(1),
        Byte(0),
        Byte(1),
        Uint32(0),
        Uint32(3),
        Array([])
    ])
    assert _marshal_pack_list(header) == (
        b"\x42\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00")

test unmarshal_struct_header():
    values = unmarshal(
        "(yyyyuua(yv))",
        b"\x42\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00")

    assert values.length() == 1
    values = values[0].to_struct()
    assert values.length() == 7
    assert values[0].to_byte() == 0x42
    assert values[1].to_byte() == 1
    assert values[2].to_byte() == 0
    assert values[3].to_byte() == 1
    assert values[4].to_uint32() == 0
    assert values[5].to_uint32() == 3
    assert values[6].to_array().length() == 0

test marshal_header():
    header: [Type] = [
        Byte(0x42),
        Byte(1),
        Byte(0),
        Byte(1),
        Uint32(0),
        Uint32(3),
        Array([])
    ]
    assert marshal(header) == (
        b"\x42\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00")

test unmarshal_header():
    values = unmarshal(
        "yyyyuua(yv)",
        b"\x42\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00")

    assert values.length() == 7
    assert values[0].to_byte() == 0x42
    assert values[1].to_byte() == 1
    assert values[2].to_byte() == 0
    assert values[3].to_byte() == 1
    assert values[4].to_uint32() == 0
    assert values[5].to_uint32() == 3
    assert values[6].to_array().length() == 0

test marshal_variant():
    assert _marshal_pack_list(Variant("i", Int32(5))) == (
        b"\x01\x69\x00\x00\x00\x00\x00\x05")

test unmarshal_variant():
    signature, value = _unmarshal_unpack_list(
        "v",
        b"\x01\x69\x00\x00\x00\x00\x00\x05").to_variant()
    assert signature == "i"
    assert value.to_int32() == 5

test marshal_dict():
    value = Dict({String("foo"): String("1"),
                  String("bar"): String("2")})
    marshalled = _marshal_pack_list(value)
    foo_before_bar = (
        b"\x00\x00\x00\x1e"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x03\x66\x6f\x6f\x00\x00\x00\x00\x01\x31\x00\x00\x00"
        b"\x00\x00\x00\x03\x62\x61\x72\x00\x00\x00\x00\x01\x32\x00")
    bar_before_foo = (
        b"\x00\x00\x00\x1e"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x03\x62\x61\x72\x00\x00\x00\x00\x01\x32\x00\x00\x00"
        b"\x00\x00\x00\x03\x66\x6f\x6f\x00\x00\x00\x00\x01\x31\x00")
    assert marshalled in [foo_before_bar, bar_before_foo]

test unmarshal_dict():
    items = _unmarshal_unpack_list(
        "{ss}",
        b"\x00\x00\x00\x1e"
        b"\x00\x00\x00\x00"
        b"\x00\x00\x00\x03\x66\x6f\x6f\x00\x00\x00\x00\x01\x31\x00\x00\x00"
        b"\x00\x00\x00\x03\x62\x61\x72\x00\x00\x00\x00\x01\x32\x00").to_dict()

    for key, value in items:
        if key.to_string() == "foo":
            assert value.to_string() == "1"
        elif key.to_string() == "bar":
            assert value.to_string() == "2"
        else:
            raise AssertionError()

test marshal_name_acquire():
    # Header.
    marshalled = marshal([
        Byte(0x4b),
        Byte(4),
        Byte(1),
        Byte(1),
        Uint32(0xb),
        Uint32(2),
        Array([
            Struct([
                Byte(1), Variant("o", ObjectPath("/org/freedesktop/DBus"))
            ]),
            Struct([
                Byte(2), Variant("s", String("org.freedesktop.DBus")),
            ]),
            Struct([
                Byte(3), Variant("s", String("NameAcquired")),
            ]),
            Struct([
                Byte(6), Variant("s", String(":1.572")),
            ]),
            Struct([
                Byte(8), Variant("g", Signature("s")),
            ]),
            Struct([
                Byte(7), Variant("s", String("org.freedesktop.DBus"))
            ]),
        ])
    ], align=8)

    assert marshalled == (
        b"\x4b\x04\x01\x01" b"\x00\x00\x00\x0b" b"\x00\x00\x00\x02"
        b"\x00\x00\x00\x8d"
        b"\x01" b"\x01\x6f\x00"
        b"\x00\x00\x00\x15/org/freedesktop/DBus\x00\x00\x00"
        b"\x02" b"\x01\x73\x00"
        b"\x00\x00\x00\x14org.freedesktop.DBus\x00\x00\x00\x00"
        b"\x03" b"\x01\x73\x00"
        b"\x00\x00\x00\x0cNameAcquired\x00\x00\x00\x00"
        b"\x06" b"\x01\x73\x00"
        b"\x00\x00\x00\x06:1.572\x00\x00"
        b"\x08" b"\x01\x67\x00" b"\x01s\x00\x00"
        b"\x07" b"\x01\x73\x00"
        b"\x00\x00\x00\x14org.freedesktop.DBus\x00\x00\x00\x00")

    # Body.
    marshalled = marshal([String(":1.572")])
    assert marshalled == b"\x00\x00\x00\x06:1.572\x00"

test unmarshal_name_acquire():
    # Header.
    values = unmarshal("yyyyuua(yv)",
                       b"\x4b\x04\x01\x01" b"\x00\x00\x00\x0b" b"\x00\x00\x00\x02"
                       b"\x00\x00\x00\x8d"
                       b"\x01" b"\x01\x6f\x00"
                       b"\x00\x00\x00\x15/org/freedesktop/DBus\x00\x00\x00"
                       b"\x02" b"\x01\x73\x00"
                       b"\x00\x00\x00\x14org.freedesktop.DBus\x00\x00\x00\x00"
                       b"\x03" b"\x01\x73\x00"
                       b"\x00\x00\x00\x0cNameAcquired\x00\x00\x00\x00"
                       b"\x06" b"\x01\x73\x00"
                       b"\x00\x00\x00\x06:1.572\x00\x00"
                       b"\x08" b"\x01\x67\x00" b"\x01s\x00\x00"
                       b"\x07" b"\x01\x73\x00"
                       b"\x00\x00\x00\x14org.freedesktop.DBus\x00\x00\x00\x00")

    assert values.length() == 7
    assert values[0].to_byte() == 0x4b
    assert values[1].to_byte() == 4
    assert values[2].to_byte() == 1
    assert values[3].to_byte() == 1
    assert values[4].to_uint32() == 0xb
    assert values[5].to_uint32() == 2

    values = values[6].to_array()
    assert values.length() == 6

    items = values[0].to_struct()
    assert items.length() == 2
    assert items[0].to_byte() == 1
    signature, value = items[1].to_variant()
    assert signature == "o"
    assert value.to_object_path() == "/org/freedesktop/DBus"

    items = values[1].to_struct()
    assert items.length() == 2
    assert items[0].to_byte() == 2
    signature, value = items[1].to_variant()
    assert signature == "s"
    assert value.to_string() == "org.freedesktop.DBus"

    items = values[2].to_struct()
    assert items.length() == 2
    assert items[0].to_byte() == 3
    signature, value = items[1].to_variant()
    assert signature == "s"
    assert value.to_string() == "NameAcquired"

    items = values[3].to_struct()
    assert items.length() == 2
    assert items[0].to_byte() == 6
    signature, value = items[1].to_variant()
    assert signature == "s"
    assert value.to_string() == ":1.572"

    items = values[4].to_struct()
    assert items.length() == 2
    assert items[0].to_byte() == 8
    signature, value = items[1].to_variant()
    assert signature == "g"
    assert value.to_signature() == "s"

    items = values[5].to_struct()
    assert items.length() == 2
    assert items[0].to_byte() == 7
    signature, value = items[1].to_variant()
    assert signature == "s"
    assert value.to_string() == "org.freedesktop.DBus"

    # Body.
    values = unmarshal("s", b"\x00\x00\x00\x06:1.572\x00")

    assert values.length() == 1
    assert values[0].to_string() == ":1.572"

test unmarshal_out_of_signature_characters():
    try:
        unmarshal("a", b"\x00\x00\x00\x00")
        message = ""
    except MarshalingError as error:
        message = error.message

    assert message == "Out of signature characters."

test unmarshal_out_of_data():
    try:
        unmarshal("i", b"\x00\x00\x00")
        message = ""
    except MarshalingError as error:
        message = error.message

    assert message == "Out of data."
